{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  XPCS   Pipeline "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook corresponds to version {{ version }} of the pipeline tool: https://github.com/NSLS-II/pipelines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NSLS2 data retrieval imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from databroker import DataBroker as db, get_images, get_table, get_events\n",
    "from filestore.api import register_handler, deregister_handler\n",
    "from filestore.retrieve import _h_registry, _HANDLER_CACHE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hdr = db[{{ uid }}]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "# register the fancy lazy chx eiger handler\n",
    "# from chxtools import handlers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lazy Eiger Handler (later will goto databroker)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import h5py\n",
    "from filestore.retrieve import HandlerBase\n",
    "from eiger_io.pims_reader import EigerImages\n",
    "\n",
    "EIGER_MD_DICT = {\n",
    "    'y_pixel_size': 'entry/instrument/detector/y_pixel_size',\n",
    "    'x_pixel_size': 'entry/instrument/detector/x_pixel_size',\n",
    "    'detector_distance': 'entry/instrument/detector/detector_distance',\n",
    "    'incident_wavelength': 'entry/instrument/beam/incident_wavelength',\n",
    "    'frame_time': 'entry/instrument/detector/frame_time',\n",
    "    'beam_center_x': 'entry/instrument/detector/beam_center_x',\n",
    "    'beam_center_y': 'entry/instrument/detector/beam_center_y',\n",
    "    'count_time': 'entry/instrument/detector/count_time',\n",
    "    'pixel_mask': 'entry/instrument/detector/detectorSpecific/pixel_mask',\n",
    "}\n",
    "\n",
    "class FixedEigerImages(EigerImages):\n",
    "    def __init__(self, path, metadata):\n",
    "        super().__init__(path)\n",
    "        self._metadata = metadata\n",
    "    \n",
    "    @property\n",
    "    def md(self):\n",
    "        return self._metadata\n",
    "    \n",
    "    @property\n",
    "    def dtype(self):\n",
    "        return self.pixel_type\n",
    "    \n",
    "    @property\n",
    "    def shape(self):\n",
    "        return self.frame_shape\n",
    "\n",
    "class LazyEigerHandler(HandlerBase):\n",
    "    specs = {'AD_EIGER'} | HandlerBase.specs\n",
    "    def __init__(self, fpath, frame_per_point, mapping=None):\n",
    "        # create pims handler\n",
    "        self.vals_dict = EIGER_MD_DICT.copy()\n",
    "        if mapping is not None:\n",
    "            self.vals_dict.update(mapping)\n",
    "        self._base_path = fpath\n",
    "        self.fpp = frame_per_point\n",
    "\n",
    "    def __call__(self, seq_id):\n",
    "        import h5py\n",
    "        master_path = '{}_{}_master.h5'.format(self._base_path, seq_id)\n",
    "        md = {}\n",
    "        print('hdf5 path = %s' % master_path)\n",
    "        with h5py.File(master_path, 'r') as f:\n",
    "            md = {k: f[v].value for k, v in self.vals_dict.items()}\n",
    "        # the pixel mask from the eiger contains:\n",
    "        # 1  -- gap\n",
    "        # 2  -- dead\n",
    "        # 4  -- under-responsive\n",
    "        # 8  -- over-responsive\n",
    "        # 16 -- noisy\n",
    "        pixel_mask = md['pixel_mask']\n",
    "        pixel_mask[pixel_mask>0] = 1\n",
    "        pixel_mask[pixel_mask==0] = 2\n",
    "        pixel_mask[pixel_mask==1] = 0\n",
    "        pixel_mask[pixel_mask==2] = 1\n",
    "        md['framerate'] = 1./md['frame_time']\n",
    "        # TODO Return a multi-dimensional PIMS seq\n",
    "        return FixedEigerImages(master_path, md)\n",
    "\n",
    "deregister_handler('AD_EIGER')\n",
    "_HANDLER_CACHE.clear()\n",
    "register_handler('AD_EIGER', LazyEigerHandler)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the events from the uid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def print_attrs(name, obj):\n",
    "    print(name)\n",
    "    for key, val in obj.attrs.items():\n",
    "        print(\"    %s: %s\" % (key, val))\n",
    "\n",
    "f = h5py.File('/XF11ID/data/2015/10/16/bcdd8b95-6adc-476b-9c65_25_master.h5','r')\n",
    "f.visititems(print_attrs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hdr = db['uid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "list(hdr.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hdr['descriptors']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "ev, = get_events(hdr, ['eiger_4M_cam_img_image_lightfield'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "imgs = ev['data']['eiger_4M_cam_img_image_lightfield']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "imgs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "imgs.md"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.imshow(imgs.md['pixel_mask'])\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interactive way to browse through images.\n",
    "\n",
    "### Note : Provide the number of images that you want to browse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "from ipywidgets import interact\n",
    "\n",
    "def view_image(i):\n",
    "    plt.imshow(imgs[i], interpolation='nearest', cmap='viridis', vmin=0, vmax=1e0)\n",
    "    plt.title(\"Browse the Image Stack\")\n",
    "    plt.show()\n",
    "    \n",
    "interact(view_image, i=(0, len(imgs)-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#hey, let's see if any images are bad!\n",
    "imgsum = [np.sum(img*imgs.md['pixel_mask']) for img in imgs[::25]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "plt.plot(imgsum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the Averaged Image Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "avg_img = np.average(imgs[::100], axis=0) * imgs.md['pixel_mask']\n",
    "# Plot the result\n",
    "fig, ax = plt.subplots()\n",
    "im = ax.imshow(avg_img, vmin=0, vmax=1e0, cmap='viridis')\n",
    "fig.colorbar(im)\n",
    "ax.set_title(\"Averaged Data\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import all the required packages for  Data Analysis\n",
    "\n",
    "* scikit-xray - data analysis tools for X-ray science \n",
    "    - https://github.com/scikit-xray/scikit-xray\n",
    "* xray-vision - plotting helper functions for X-ray science\n",
    "    - https://github.com/Nikea/xray-vision\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import xray_vision\n",
    "import xray_vision.mpl_plotting as mpl_plot  \n",
    "from xray_vision.mpl_plotting import speckle\n",
    "from xray_vision.mask.manual_mask import ManualMask\n",
    "\n",
    "import skxray.core.roi as roi\n",
    "import skxray.core.correlation as corr\n",
    "import skxray.core.utils as utils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Note:  Enter the following experiment information \n",
    "\n",
    "* The physical size of the pixels\n",
    "* Wavelegth of the X-rays  - (units in Angstroms)\n",
    "* Detector to sample distance\n",
    "* Exposure time - (units in seconds)\n",
    "* acqusition period - (units in seconds)\n",
    "* dead time - (units in seconds)\n",
    "* time per frame = (exposure time + dead_time or acqusition period) - (units in seconds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "imgs.md"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# The physical size of the pixels\n",
    "dpix = imgs.md['x_pixel_size'] * 1000.\n",
    "lambda_ = imgs.md['incident_wavelength']    # wavelegth of the X-rays in Angstroms\n",
    "Ldet = 5000.        # detector to sample distance (mm)\n",
    "\n",
    "exposuretime= imgs.md['count_time']\n",
    "acquisition_period = imgs.md['frame_time']\n",
    "\n",
    "# deadtime= 0   # 60e-6 \n",
    "# timeperframe = exposuretime + deadtime\n",
    "timeperframe = acquisition_period  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Create the mask file\n",
    "\n",
    "More information : https://github.com/Nikea/xray-vision/blob/master/xray_vision/mask/manual_mask.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ManualMask??"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots()\n",
    "m = ManualMask(ax, avg_img, vmin=0, vmax=1e0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "new_mask = m.mask\n",
    "\n",
    "plt.imshow(new_mask)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Combine the hand-drawn mask and the pixel mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mask = ~m.mask * imgs.md['pixel_mask']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.imshow(mask)\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get the approximate center and see the statistic to make sure "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "center = (1634.66, 838.6)  # center of the speckle pattern\n",
    "# center = (imgs.md['beam_center_x'], imgs.md['beam_center_y'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Circular Average : compute the radial integartion from the center of the speckle pattern"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "bin_centers, ring_averages= roi.circular_average(avg_img*mask, center, threshold=0, nx=1000,\n",
    "                                         pixel_size=(dpix, dpix))\n",
    "\n",
    "#  convert to q (reciprocal space)\n",
    "two_theta = utils.radius_to_twotheta(Ldet, bin_centers)\n",
    "q_val = utils.twotheta_to_q(two_theta, lambda_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots( figsize=(6, 6))\n",
    "axes.semilogy(q_val, ring_averages, '-o')\n",
    "axes.set_title(\"Circular Average\")\n",
    "axes.set_ylabel(\"Ring Avearge\")\n",
    "axes.set_xlabel(\"Bin Centers (1/Angstroms)\")\n",
    "axes.set_xlim(0, 0.1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create label array (Q rings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "inner_radius = 150# radius of the first ring\n",
    "width = 10        # width of each ring\n",
    "spacing = 3      # no spacing between rings\n",
    "num_rings = 15   # number of rings\n",
    "\n",
    "#  find the edges of the required rings\n",
    "edges = roi.ring_edges(inner_radius, width, spacing, num_rings)\n",
    "edges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "two_theta = utils.radius_to_twotheta(Ldet, edges*dpix)\n",
    "q_ring_val = utils.twotheta_to_q(two_theta, lambda_)\n",
    "\n",
    "q_ring_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots( figsize=(6, 6))\n",
    "axes.semilogy(q_val, ring_averages, '-o')\n",
    "axes.set_title(\"Circular Average with the Q ring values\")\n",
    "axes.set_ylabel(\"Ring Avearge\")\n",
    "axes.set_xlabel(\"Bin Centers (1/Angstroms)\")\n",
    "axes.set_xlim(0, 0.1)\n",
    "for i in range(num_rings):\n",
    "    axes.axvline(q_ring_val[i, 0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "rings = roi.rings(edges, center, avg_img.shape)\n",
    "\n",
    "ring_mask = rings*mask\n",
    "% matplotlib notebook\n",
    "# plot the figure\n",
    "fig, axes = plt.subplots(figsize=(8,8))\n",
    "axes.set_title(\"Labeled Array\")\n",
    "im = mpl_plot.show_label_array(axes, ring_mask, cmap='viridis')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot Kymograph (Waterfall plot) for a vertical and hortizontal cuts\n",
    "\n",
    "\n",
    "Note : Give coordinates of the upper-left corner and width and height of each\n",
    "rectangle: e.g., [(x, y, w, h), (x, y, w, h)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "vert_rect = ((1500, 803, 40, 20), (1554, 546, 30, 40), (1454, 1098, 20, 60)) \n",
    "\n",
    "V_K_label_array = roi.rectangles(vert_rect, avg_img.shape)\n",
    "plt.figure()\n",
    "plt.imshow(V_K_label_array)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "veri_kymo = roi.kymograph(imgs, V_K_label_array*mask, num = 1)\n",
    "\n",
    "hori_kymo = roi.kymograph(imgs, V_K_label_array*mask, num=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(14,10))\n",
    "ax.set_xlabel('Pixel')\n",
    "ax.set_ylabel('Frame')\n",
    "ax.set_title('Kymograph')\n",
    "ax.imshow(veri_kymo, cmap='viridis')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Kymograph(waterfall plot) of the 3rd ring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "kymo = roi.kymograph(imgs*mask, ring_mask, num=3)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(14, 10))\n",
    "ax.set_xlabel('Pixel')\n",
    "ax.set_ylabel('Frame')\n",
    "ax.set_title('Kymograph')\n",
    "ax.imshow(kymo, cmap='viridis')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Mean intensities for each ring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mask_data = imgs[::50]*mask\n",
    "mean_int_sets, index_list = roi.mean_intensity(mask_data, ring_mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mean_int_sets.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "time = np.arange(len(mask_data))*timeperframe  # get the time for each frame\n",
    "\n",
    "%matplotlib inline\n",
    "fig, ax = plt.subplots(figsize=(8, 8))\n",
    "ax.set_title(\"Mean intensity of each ring\")\n",
    "for i in range(num_rings):\n",
    "    ax.plot(time, mean_int_sets[:,i], label=\"Ring \"+str(i+1))\n",
    "    ax.set_xlabel(\"Time\")\n",
    "    ax.set_ylabel(\"Mean Intensity\")\n",
    "ax.legend() \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## One time Correlation\n",
    "\n",
    "Note : Enter the number of levels and number of buffers for Muliti tau one time correlation\n",
    "number of buffers has to be even. More details in https://github.com/scikit-xray/scikit-xray/blob/master/skxray/core/correlation.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "subset = imgs[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class Masker:\n",
    "    def __init__(self, indexable, mask):\n",
    "        self.indexable = indexable\n",
    "        self.mask = mask\n",
    "    def __getitem__(self, key):\n",
    "        return self.indexable[key] * mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "masker = Masker(imgs, mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "masker[1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "num_lev = 9  \n",
    "num_buf = 8\n",
    "\n",
    "g2, lag_steps = corr.multi_tau_auto_corr(num_lev, num_buf, ring_mask,\n",
    "                                             masker)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the one time correlation functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "lags = lag_steps*timeperframe\n",
    "\n",
    "fig, axes = plt.subplots(num_rings, sharex=True, figsize=(5, 30))\n",
    "axes[num_rings-1].set_xlabel(\"lags\")\n",
    "for i in range(num_rings):\n",
    "    axes[i].set_ylabel(\"g2\") \n",
    "    axes[i].set_title(\" Q ring value \" + str(q_ring_val[i, 0]))\n",
    "    axes[i].semilogx(lags, g2[:, i], '-o', markersize=6)\n",
    "    axes[i].set_ylim(bottom=1.10, top=1.15)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
